
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_pairwise_roi_alignment.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_pairwise_roi_alignment.py>`
        to download the full example code. or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_pairwise_roi_alignment.py:


Pairwise functional alignment on a ROI.
=======================================

In this tutorial, we focus here on a single Region of Interest (ROI). On this
ROI, we try to find a transformation from source to target subject that
captures the variability between their signal on data they share. We then use
this transformation to predict new contrasts for the target subject.

We mostly rely on python common packages and on nilearn to handle functional
data in a clean fashion.


To run this example, you must launch IPython via ``ipython
--matplotlib`` in a terminal, or use ``jupyter-notebook``.

.. GENERATED FROM PYTHON SOURCE LINES 20-30

Retrieve the data
------------------
In this example we use the IBC dataset, which include a large number of
different contrasts maps for 12 subjects.
We download the images for subjects sub-01 and sub-02 (or retrieve them if they
were already downloaded).
Files is the list of paths for each subjects.
df is a dataframe with metadata about each of them.
mask is an appropriate nifti image to select the data.


.. GENERATED FROM PYTHON SOURCE LINES 30-35

.. code-block:: Python


    from fmralign.fetch_example_data import fetch_ibc_subjects_contrasts

    files, df, mask = fetch_ibc_subjects_contrasts(["sub-01", "sub-02"])








.. GENERATED FROM PYTHON SOURCE LINES 36-40

Extract a mask for the visual cortex from Yeo Atlas
---------------------------------------------------
First, we fetch and plot the complete atlas


.. GENERATED FROM PYTHON SOURCE LINES 40-63

.. code-block:: Python


    from nilearn import datasets
    from nilearn.image import load_img, new_img_like, resample_to_img
    from nilearn.plotting import plot_roi

    atlas_yeo_2011 = datasets.fetch_atlas_yeo_2011()
    atlas_yeo = atlas_yeo_2011.thick_7
    atlas = load_img(atlas_yeo)

    # Select visual cortex, create a mask and resample it to the right resolution

    mask_visual = new_img_like(atlas, atlas.get_fdata() == 1)
    resampled_mask_visual = resample_to_img(mask_visual, mask, interpolation="nearest")

    # Plot the mask we will use
    plot_roi(
        resampled_mask_visual,
        title="Visual regions mask extracted from atlas",
        cut_coords=(8, -80, 9),
        colorbar=True,
        cmap="Paired",
    )




.. image-sg:: /auto_examples/images/sphx_glr_plot_pairwise_roi_alignment_001.png
   :alt: plot pairwise roi alignment
   :srcset: /auto_examples/images/sphx_glr_plot_pairwise_roi_alignment_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Dataset created in /home/runner/nilearn_data/yeo_2011

    Downloading data from ftp://surfer.nmr.mgh.harvard.edu/pub/data/Yeo_JNeurophysiol11_MNI152.zip ...
     ...done. (0 seconds, 0 min)
    Extracting data from /home/runner/nilearn_data/yeo_2011/d7a5390bfb7686fb41fa64cc2ba058d0/Yeo_JNeurophysiol11_MNI152.zip..... done.

    <nilearn.plotting.displays._slicers.OrthoSlicer object at 0x7f62acaa0f10>



.. GENERATED FROM PYTHON SOURCE LINES 64-70

Definine a masker
-----------------
We define a nilearn masker that will be used to handle relevant data.
For more information, visit :
'http://nilearn.github.io/manipulating_images/masker_objects.html'


.. GENERATED FROM PYTHON SOURCE LINES 70-75

.. code-block:: Python


    from nilearn.maskers import NiftiMasker

    roi_masker = NiftiMasker(mask_img=resampled_mask_visual).fit()








.. GENERATED FROM PYTHON SOURCE LINES 76-82

Prepare the data
----------------
For each subject, we will use two series of contrasts acquired during
two independent sessions with a different phase encoding:
Antero-posterior(AP) or Postero-anterior(PA).


.. GENERATED FROM PYTHON SOURCE LINES 82-100

.. code-block:: Python



    # The training fold, used to learn alignment from source subject toward target:
    # * source train: AP contrasts for subject sub-01
    # * target train: AP contrasts for subject sub-02

    source_train = df[df.subject == "sub-01"][df.acquisition == "ap"].path.values
    target_train = df[df.subject == "sub-02"][df.acquisition == "ap"].path.values

    # The testing fold:
    # * source test: PA contrasts for subject sub-01, used to predict
    #   the corresponding contrasts of subject sub-02
    # * target test: PA contrasts for subject sub-02, used as a ground truth
    #   to score our predictions

    source_test = df[df.subject == "sub-01"][df.acquisition == "pa"].path.values
    target_test = df[df.subject == "sub-02"][df.acquisition == "pa"].path.values





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/fmralign/fmralign/examples/plot_pairwise_roi_alignment.py:88: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
      source_train = df[df.subject == "sub-01"][df.acquisition == "ap"].path.values
    /home/runner/work/fmralign/fmralign/examples/plot_pairwise_roi_alignment.py:89: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
      target_train = df[df.subject == "sub-02"][df.acquisition == "ap"].path.values
    /home/runner/work/fmralign/fmralign/examples/plot_pairwise_roi_alignment.py:97: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
      source_test = df[df.subject == "sub-01"][df.acquisition == "pa"].path.values
    /home/runner/work/fmralign/fmralign/examples/plot_pairwise_roi_alignment.py:98: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
      target_test = df[df.subject == "sub-02"][df.acquisition == "pa"].path.values




.. GENERATED FROM PYTHON SOURCE LINES 101-111

Define the estimator, fit it and predict
----------------------------------------
To proceed with alignment we use the class PairwiseAlignment with the visual
mask we created before.
We use the scaled orthogonal method, common in the literature under the name
hyperalignment. As we work on a single ROI, we will search correspondence
between the full data of each subject and so we set the number of cluster
n_pieces to 1. We learn alignment estimator on train data and use it to
predict target test data.


.. GENERATED FROM PYTHON SOURCE LINES 111-120

.. code-block:: Python


    from fmralign.pairwise_alignment import PairwiseAlignment

    alignment_estimator = PairwiseAlignment(
        alignment_method="scaled_orthogonal", n_pieces=1, mask=roi_masker
    )
    alignment_estimator.fit(source_train, target_train)
    target_pred = alignment_estimator.transform(source_test)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/fmralign/fmralign/fmralign/_utils.py:69: UserWarning: 
     Some parcels are more than 1000 voxels wide it can slow down alignment,especially optimal_transport :
     parcel 1 : 6631 voxels
      warnings.warn(warning)




.. GENERATED FROM PYTHON SOURCE LINES 121-129

Score the baseline and the prediction
-------------------------------------
We use a utility scoring function to measure the voxelwise
correlation between the prediction and the ground truth. That is, for each voxel,
we measure the correlation between its profile of activation without
and with alignment, to see if alignment was able to predict a signal more
alike the ground truth.


.. GENERATED FROM PYTHON SOURCE LINES 129-142

.. code-block:: Python


    from fmralign.metrics import score_voxelwise

    # Now we use this scoring function to compare the correlation of aligned and
    # original data from sub-01 made with the real PA contrasts of sub-02.

    baseline_score = roi_masker.inverse_transform(
        score_voxelwise(target_test, source_test, roi_masker, loss="corr")
    )
    aligned_score = roi_masker.inverse_transform(
        score_voxelwise(target_test, target_pred, roi_masker, loss="corr")
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/fmralign/fmralign/fmralign/metrics.py:62: ConstantInputWarning: An input array is constant; the correlation coefficient is not defined.
      pearsonr(X_gt[:, vox], X_pred[:, vox])[




.. GENERATED FROM PYTHON SOURCE LINES 143-147

Plotting the measures
---------------------
Finally we plot both scores.


.. GENERATED FROM PYTHON SOURCE LINES 147-159

.. code-block:: Python


    from nilearn import plotting

    baseline_display = plotting.plot_stat_map(
        baseline_score, display_mode="z", vmax=1, cut_coords=[-15, -5]
    )
    baseline_display.title("Baseline correlation wt ground truth")
    display = plotting.plot_stat_map(
        aligned_score, display_mode="z", cut_coords=[-15, -5], vmax=1
    )
    display.title("Prediction correlation wt ground truth")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_pairwise_roi_alignment_002.png
         :alt: plot pairwise roi alignment
         :srcset: /auto_examples/images/sphx_glr_plot_pairwise_roi_alignment_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_pairwise_roi_alignment_003.png
         :alt: plot pairwise roi alignment
         :srcset: /auto_examples/images/sphx_glr_plot_pairwise_roi_alignment_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/nilearn/plotting/img_plotting.py:1317: UserWarning: Non-finite values detected. These values will be replaced with zeros.
      safe_get_data(stat_map_img, ensure_finite=True),




.. GENERATED FROM PYTHON SOURCE LINES 160-162

We can see on the plot that after alignment, the prediction made for one
subject data, informed by another subject are greatly improved.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 23.132 seconds)


.. _sphx_glr_download_auto_examples_plot_pairwise_roi_alignment.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/plot_pairwise_roi_alignment.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_pairwise_roi_alignment.ipynb <plot_pairwise_roi_alignment.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_pairwise_roi_alignment.py <plot_pairwise_roi_alignment.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_pairwise_roi_alignment.zip <plot_pairwise_roi_alignment.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
